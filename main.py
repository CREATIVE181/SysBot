import os
import psutil
import logging
import subprocess
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, File
from aiogram.enums import ParseMode
from dotenv import load_dotenv
import time

load_dotenv()

TOKEN = os.getenv("TOKEN")
USER_ID = os.getenv("USER_ID")

if not TOKEN or not USER_ID:
    raise ValueError("–¢–æ–∫–µ–Ω –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
current_directory = os.getcwd()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É Downloads, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
downloads_dir = os.path.join(current_directory, "Downloads")
os.makedirs(downloads_dir, exist_ok=True)

def get_cpu_temperature():
    try:
        if hasattr(psutil, "sensors_temperatures"):
            temps = psutil.sensors_temperatures()
            if 'coretemp' in temps:
                return temps['coretemp'][0].current

        with open("/sys/class/thermal/thermal_zone0/temp", "r") as f:
            return int(f.read()) / 1000
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU: {e}")
    return None

def execute_command(command):
    global current_directory

    try:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "cd", –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if command.startswith("cd "):
            new_dir = command.split(" ", 1)[1].strip()
            try:
                os.chdir(new_dir)
                current_directory = os.getcwd()
                return f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {current_directory}"
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}"
        else:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                cwd=current_directory
            )
            return result.stdout or result.stderr
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return f"–û—à–∏–±–∫–∞: {e}"

async def check_critical_events():
    cpu_usage = psutil.cpu_percent(interval=1)
    ram_usage = psutil.virtual_memory().percent
    disk_usage = psutil.disk_usage('/').percent
    cpu_temp = get_cpu_temperature()

    warnings = []
    if cpu_usage > 90:
        warnings.append("‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ó–∞–≥—Ä—É–∑–∫–∞ CPU –ø—Ä–µ–≤—ã—à–∞–µ—Ç 90%.")
    if ram_usage > 90:
        warnings.append("‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ó–∞–≥—Ä—É–∑–∫–∞ RAM –ø—Ä–µ–≤—ã—à–∞–µ—Ç 90%.")
    if disk_usage > 90:
        warnings.append("‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 90%.")
    if cpu_temp is not None and cpu_temp > 80:
        warnings.append("‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU –ø—Ä–µ–≤—ã—à–∞–µ—Ç 80¬∞C.")

    for warning in warnings:
        await bot.send_message(chat_id=USER_ID, text=warning, parse_mode=ParseMode.HTML)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    if str(message.from_user.id) != USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    if str(message.from_user.id) != USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /help")
    help_text = (
        f"üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n"
        f"/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞\n"
        f"/c &lt;–∫–æ–º–∞–Ω–¥–∞&gt; - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n"
        f"/top - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
        f"/netstat - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
        f"/traffic - –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ñ–∏–∫\n"
        f"/ssh &lt;add|remove&gt; &lt;–ø—É–±–ª–∏—á–Ω—ã–π_–∫–ª—é—á&gt; - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSH-–∫–ª—é—á–∞–º–∏\n"
        f"/file - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n"
        f"/reboot - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
        f"/logs - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞\n"
        f"/sysinfo - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"
    )
    await message.answer(help_text, parse_mode=ParseMode.HTML)

@dp.message(Command("status"))
async def cmd_status(message: Message):
    if str(message.from_user.id) != USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /status")
    cpu_usage = psutil.cpu_percent(interval=1)
    ram_usage = psutil.virtual_memory().percent
    disk_usage = psutil.disk_usage('/').percent
    cpu_temp = get_cpu_temperature()

    status_message = (
        "üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:</b>\n"
        f"‚Ä¢ <b>CPU:</b> {cpu_usage}%\n"
        f"‚Ä¢ <b>RAM:</b> {ram_usage}%\n"
        f"‚Ä¢ <b>–î–∏—Å–∫:</b> {disk_usage}%\n"
    )

    if cpu_temp is not None:
        status_message += f"‚Ä¢ <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU:</b> {cpu_temp}¬∞C\n"
    else:
        status_message += "‚Ä¢ <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU:</b> N/A\n"

    await message.answer(status_message, parse_mode=ParseMode.HTML)

@dp.message(Command("c"))
async def cmd_execute(message: Message):
    if str(message.from_user.id) != USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    command = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not command:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
        return

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É: {command}")
    result = execute_command(command)
    await message.answer(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n<pre>{result}</pre>", parse_mode=ParseMode.HTML)

@dp.message(Command("top"))
async def cmd_top(message: Message):
    if str(message.from_user.id) != USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /top")
    try:
        processes = sorted(
            psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']),
            key=lambda p: p.info['cpu_percent'], reverse=True
        )[:5]

        response = "üìä <b>–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</b>\n"
        for p in processes:
            response += f"‚Ä¢ PID: {p.info['pid']}, –ò–º—è: {p.info['name']}, CPU: {p.info['cpu_percent']}%, RAM: {p.info['memory_percent']}%\n"

        await message.answer(response, parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{str(e)}</pre>", parse_mode=ParseMode.HTML)

@dp.message(Command("netstat"))
async def cmd_netstat(message: Message):
    if str(message.from_user.id) != USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /netstat")
    try:
        result = subprocess.run("netstat -tuln", shell=True, capture_output=True, text=True)
        output = result.stdout or result.stderr

        await message.answer(f"üì° <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b>\n<pre>{output}</pre>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{str(e)}</pre>", parse_mode=ParseMode.HTML)

@dp.message(Command("ssh"))
async def cmd_ssh(message: Message):
    if str(message.from_user.id) != USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ssh <add|remove> <–ø—É–±–ª–∏—á–Ω—ã–π_–∫–ª—é—á>", parse_mode=ParseMode.HTML)
        return

    action, key = args[1], args[2]
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /ssh {action}")
    try:
        if action == "add":
            with open("/root/.ssh/authorized_keys", "a") as f:
                f.write(f"\n{key}")
        elif action == "remove":
            with open("/root/.ssh/authorized_keys", "r") as f:
                lines = f.readlines()
            with open("/root/.ssh/authorized_keys", "w") as f:
                for line in lines:
                    if key not in line:
                        f.write(line)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ add –∏–ª–∏ remove.", parse_mode=ParseMode.HTML)
            return

        await message.answer("‚úÖ SSH-–∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω.", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{str(e)}</pre>", parse_mode=ParseMode.HTML)

@dp.message(Command("traffic"))
async def cmd_traffic(message: Message):
    if str(message.from_user.id) != USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /traffic")
    try:
        result = subprocess.run("vnstat", shell=True, capture_output=True, text=True)
        output = result.stdout if result.stdout else result.stderr

        await message.answer(f"üì° <b>–°–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫:</b>\n<pre>{output}</pre>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{str(e)}</pre>", parse_mode=ParseMode.HTML)

@dp.message(Command("file"))
async def cmd_file(message: Message):
    if str(message.from_user.id) != USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    if not message.document and not message.photo:
        await message.answer("‚ùå –§–∞–π–ª—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    files = []
    if message.document:
        files.extend(message.document)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    if message.photo:
        files.append(message.photo[-1])  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ (—Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)

    success_files = []
    failed_files = []

    for file in files:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = int(time.time())
        if hasattr(file, 'file_name'):
            file_name = f"{timestamp}_{file.file_name}"  # –î–æ–±–∞–≤–ª—è–µ–º timestamp –∫ –∏–º–µ–Ω–∏
        else:
            file_name = f"photo_{timestamp}_{file.file_id}.jpg"  # –î–ª—è —Ñ–æ—Ç–æ

        file_path = os.path.join(downloads_dir, file_name)

        try:
            await bot.download(file, destination=file_path)
            success_files.append(file_name)
        except Exception as e:
            failed_files.append((file_name, str(e)))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = []
    if success_files:
        response.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–∞–π–ª—ã:\n<pre>{', '.join(success_files)}</pre>")
    if failed_files:
        failed_messages = [f"{name}: {error}" for name, error in failed_files]
        response.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤:\n<pre>{', '.join(failed_messages)}</pre>")

    await message.answer("\n".join(response), parse_mode=ParseMode.HTML)

@dp.message(Command("reboot"))
async def cmd_reboot(message: Message):
    if str(message.from_user.id) != USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /reboot")
    try:
        await message.answer("üîÑ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
        subprocess.run("sudo reboot", shell=True, check=True)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:\n<pre>{str(e)}</pre>", parse_mode=ParseMode.HTML)

@dp.message(Command("logs"))
async def cmd_logs(message: Message):
    if str(message.from_user.id) != USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /logs")
    try:
        with open("bot.log", "r") as log_file:
            logs = log_file.readlines()[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
            logs = "".join(logs)
            await message.answer(f"üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n<pre>{logs}</pre>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:\n<pre>{str(e)}</pre>", parse_mode=ParseMode.HTML)

@dp.message(Command("sysinfo"))
async def cmd_sysinfo(message: Message):
    if str(message.from_user.id) != USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /sysinfo")
    try:
        hostname = os.uname().nodename
        os_info = os.uname().sysname + " " + os.uname().release
        cpu_count = os.cpu_count()

        sysinfo_message = (
            "üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:</b>\n"
            f"‚Ä¢ <b>–ò–º—è —Ö–æ—Å—Ç–∞:</b> {hostname}\n"
            f"‚Ä¢ <b>–û–°:</b> {os_info}\n"
            f"‚Ä¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä CPU:</b> {cpu_count}\n"
        )

        await message.answer(sysinfo_message, parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{str(e)}</pre>", parse_mode=ParseMode.HTML)

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        import asyncio

        asyncio.run(main())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
