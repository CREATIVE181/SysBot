import os
import psutil
import logging
import subprocess
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

if not TOKEN or not CHAT_ID:
    raise ValueError("–¢–æ–∫–µ–Ω –∏–ª–∏ ID —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")

bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def get_cpu_temperature():
    try:
        if hasattr(psutil, "sensors_temperatures"):
            temps = psutil.sensors_temperatures()
            if 'coretemp' in temps:
                return temps['coretemp'][0].current

        with open("/sys/class/thermal/thermal_zone0/temp", "r") as f:
            return int(f.read()) / 1000
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU: {e}")
    return None

def execute_command(command):
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True
        )
        return result.stdout or result.stderr
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return f"–û—à–∏–±–∫–∞: {e}"

async def check_critical_events():
    cpu_usage = psutil.cpu_percent(interval=1)
    ram_usage = psutil.virtual_memory().percent
    disk_usage = psutil.disk_usage('/').percent
    cpu_temp = get_cpu_temperature()

    warnings = []
    if cpu_usage > 90:
        warnings.append("‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ó–∞–≥—Ä—É–∑–∫–∞ CPU –ø—Ä–µ–≤—ã—à–∞–µ—Ç 90%.")
    if ram_usage > 90:
        warnings.append("‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ó–∞–≥—Ä—É–∑–∫–∞ RAM –ø—Ä–µ–≤—ã—à–∞–µ—Ç 90%.")
    if disk_usage > 90:
        warnings.append("‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 90%.")
    if cpu_temp is not None and cpu_temp > 80:
        warnings.append("‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU –ø—Ä–µ–≤—ã—à–∞–µ—Ç 80¬∞C.")

    for warning in warnings:
        await bot.send_message(chat_id=CHAT_ID, text=warning, parse_mode=ParseMode.HTML)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        f"üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n"
        f"/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞\n"
        f"/c &lt;–∫–æ–º–∞–Ω–¥–∞&gt; - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n"
        f"/top - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
        f"/netstat - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
        f"/traffic - –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ñ–∏–∫\n"
        f"/ssh &lt;add|remove&gt; &lt;–ø—É–±–ª–∏—á–Ω—ã–π_–∫–ª—é—á&gt; - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSH-–∫–ª—é—á–∞–º–∏"
    )
    await message.answer(help_text, parse_mode=ParseMode.HTML)

@dp.message(Command("status"))
async def cmd_status(message: Message):
    cpu_usage = psutil.cpu_percent(interval=1)
    ram_usage = psutil.virtual_memory().percent
    disk_usage = psutil.disk_usage('/').percent
    cpu_temp = get_cpu_temperature()

    status_message = (
        "üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:</b>\n"
        f"‚Ä¢ <b>CPU:</b> {cpu_usage}%\n"
        f"‚Ä¢ <b>RAM:</b> {ram_usage}%\n"
        f"‚Ä¢ <b>–î–∏—Å–∫:</b> {disk_usage}%\n"
    )

    if cpu_temp is not None:
        status_message += f"‚Ä¢ <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU:</b> {cpu_temp}¬∞C\n"
    else:
        status_message += "‚Ä¢ <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU:</b> N/A\n"

    await message.answer(status_message, parse_mode=ParseMode.HTML)

@dp.message(Command("c"))
async def cmd_execute(message: Message):
    if str(message.from_user.id) != CHAT_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.")
        return

    command = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not command:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
        return

    result = execute_command(command)
    await message.answer(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n<pre>{result}</pre>", parse_mode=ParseMode.HTML)

@dp.message(Command("top"))
async def cmd_top(message: Message):
    try:
        processes = sorted(
            psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']),
            key=lambda p: p.info['cpu_percent'], reverse=True
        )[:5]

        response = "üìä <b>–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</b>\n"
        for p in processes:
            response += f"‚Ä¢ PID: {p.info['pid']}, –ò–º—è: {p.info['name']}, CPU: {p.info['cpu_percent']}%, RAM: {p.info['memory_percent']}%\n"

        await message.answer(response, parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{str(e)}</pre>", parse_mode=ParseMode.HTML)

@dp.message(Command("netstat"))
async def cmd_netstat(message: Message):
    try:
        result = subprocess.run("netstat -tuln", shell=True, capture_output=True, text=True)
        output = result.stdout or result.stderr

        await message.answer(f"üì° <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b>\n<pre>{output}</pre>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{str(e)}</pre>", parse_mode=ParseMode.HTML)

@dp.message(Command("ssh"))
async def cmd_ssh(message: Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ssh <add|remove> <–ø—É–±–ª–∏—á–Ω—ã–π_–∫–ª—é—á>", parse_mode=ParseMode.HTML)
        return

    action, key = args[1], args[2]
    try:
        if action == "add":
            with open("/root/.ssh/authorized_keys", "a") as f:
                f.write(f"\n{key}")
        elif action == "remove":
            with open("/root/.ssh/authorized_keys", "r") as f:
                lines = f.readlines()
            with open("/root/.ssh/authorized_keys", "w") as f:
                for line in lines:
                    if key not in line:
                        f.write(line)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ add –∏–ª–∏ remove.", parse_mode=ParseMode.HTML)
            return

        await message.answer("‚úÖ SSH-–∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω.", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{str(e)}</pre>", parse_mode=ParseMode.HTML)

@dp.message(Command("traffic"))
async def cmd_traffic(message: Message):
    try:
        result = subprocess.run("vnstat", shell=True, capture_output=True, text=True)
        output = result.stdout if result.stdout else result.stderr

        await message.answer(f"üì° <b>–°–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫:</b>\n<pre>{output}</pre>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{str(e)}</pre>", parse_mode=ParseMode.HTML)

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        import asyncio

        asyncio.run(main())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")